# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `PetFood.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module PetFoodSensors
_M_PetFoodSensors = Ice.openModule('PetFoodSensors')
__name__ = 'PetFoodSensors'

_M_PetFoodSensors._t_SensorControl = IcePy.defineValue('::PetFoodSensors::SensorControl', Ice.Value, -1, (), False, True, None, ())

if 'SensorControlPrx' not in _M_PetFoodSensors.__dict__:
    _M_PetFoodSensors.SensorControlPrx = Ice.createTempClass()
    class SensorControlPrx(Ice.ObjectPrx):

        def motorTime(self, time, context=None):
            return _M_PetFoodSensors.SensorControl._op_motorTime.invoke(self, ((time, ), context))

        def motorTimeAsync(self, time, context=None):
            return _M_PetFoodSensors.SensorControl._op_motorTime.invokeAsync(self, ((time, ), context))

        def begin_motorTime(self, time, _response=None, _ex=None, _sent=None, context=None):
            return _M_PetFoodSensors.SensorControl._op_motorTime.begin(self, ((time, ), _response, _ex, _sent, context))

        def end_motorTime(self, _r):
            return _M_PetFoodSensors.SensorControl._op_motorTime.end(self, _r)

        def givefood(self, weight, context=None):
            return _M_PetFoodSensors.SensorControl._op_givefood.invoke(self, ((weight, ), context))

        def givefoodAsync(self, weight, context=None):
            return _M_PetFoodSensors.SensorControl._op_givefood.invokeAsync(self, ((weight, ), context))

        def begin_givefood(self, weight, _response=None, _ex=None, _sent=None, context=None):
            return _M_PetFoodSensors.SensorControl._op_givefood.begin(self, ((weight, ), _response, _ex, _sent, context))

        def end_givefood(self, _r):
            return _M_PetFoodSensors.SensorControl._op_givefood.end(self, _r)

        def getContainerFood(self, context=None):
            return _M_PetFoodSensors.SensorControl._op_getContainerFood.invoke(self, ((), context))

        def getContainerFoodAsync(self, context=None):
            return _M_PetFoodSensors.SensorControl._op_getContainerFood.invokeAsync(self, ((), context))

        def begin_getContainerFood(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PetFoodSensors.SensorControl._op_getContainerFood.begin(self, ((), _response, _ex, _sent, context))

        def end_getContainerFood(self, _r):
            return _M_PetFoodSensors.SensorControl._op_getContainerFood.end(self, _r)

        def getFoodEated(self, context=None):
            return _M_PetFoodSensors.SensorControl._op_getFoodEated.invoke(self, ((), context))

        def getFoodEatedAsync(self, context=None):
            return _M_PetFoodSensors.SensorControl._op_getFoodEated.invokeAsync(self, ((), context))

        def begin_getFoodEated(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PetFoodSensors.SensorControl._op_getFoodEated.begin(self, ((), _response, _ex, _sent, context))

        def end_getFoodEated(self, _r):
            return _M_PetFoodSensors.SensorControl._op_getFoodEated.end(self, _r)

        def eatingNow(self, context=None):
            return _M_PetFoodSensors.SensorControl._op_eatingNow.invoke(self, ((), context))

        def eatingNowAsync(self, context=None):
            return _M_PetFoodSensors.SensorControl._op_eatingNow.invokeAsync(self, ((), context))

        def begin_eatingNow(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PetFoodSensors.SensorControl._op_eatingNow.begin(self, ((), _response, _ex, _sent, context))

        def end_eatingNow(self, _r):
            return _M_PetFoodSensors.SensorControl._op_eatingNow.end(self, _r)

        def getWeight(self, context=None):
            return _M_PetFoodSensors.SensorControl._op_getWeight.invoke(self, ((), context))

        def getWeightAsync(self, context=None):
            return _M_PetFoodSensors.SensorControl._op_getWeight.invokeAsync(self, ((), context))

        def begin_getWeight(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PetFoodSensors.SensorControl._op_getWeight.begin(self, ((), _response, _ex, _sent, context))

        def end_getWeight(self, _r):
            return _M_PetFoodSensors.SensorControl._op_getWeight.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_PetFoodSensors.SensorControlPrx.ice_checkedCast(proxy, '::PetFoodSensors::SensorControl', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_PetFoodSensors.SensorControlPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::PetFoodSensors::SensorControl'
    _M_PetFoodSensors._t_SensorControlPrx = IcePy.defineProxy('::PetFoodSensors::SensorControl', SensorControlPrx)

    _M_PetFoodSensors.SensorControlPrx = SensorControlPrx
    del SensorControlPrx

    _M_PetFoodSensors.SensorControl = Ice.createTempClass()
    class SensorControl(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::PetFoodSensors::SensorControl')

        def ice_id(self, current=None):
            return '::PetFoodSensors::SensorControl'

        @staticmethod
        def ice_staticId():
            return '::PetFoodSensors::SensorControl'

        def motorTime(self, time, current=None):
            raise NotImplementedError("servant method 'motorTime' not implemented")

        def givefood(self, weight, current=None):
            raise NotImplementedError("servant method 'givefood' not implemented")

        def getContainerFood(self, current=None):
            raise NotImplementedError("servant method 'getContainerFood' not implemented")

        def getFoodEated(self, current=None):
            raise NotImplementedError("servant method 'getFoodEated' not implemented")

        def eatingNow(self, current=None):
            raise NotImplementedError("servant method 'eatingNow' not implemented")

        def getWeight(self, current=None):
            raise NotImplementedError("servant method 'getWeight' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_PetFoodSensors._t_SensorControlDisp)

        __repr__ = __str__

    _M_PetFoodSensors._t_SensorControlDisp = IcePy.defineClass('::PetFoodSensors::SensorControl', SensorControl, (), None, ())
    SensorControl._ice_type = _M_PetFoodSensors._t_SensorControlDisp

    SensorControl._op_motorTime = IcePy.Operation('motorTime', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    SensorControl._op_givefood = IcePy.Operation('givefood', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    SensorControl._op_getContainerFood = IcePy.Operation('getContainerFood', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    SensorControl._op_getFoodEated = IcePy.Operation('getFoodEated', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    SensorControl._op_eatingNow = IcePy.Operation('eatingNow', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    SensorControl._op_getWeight = IcePy.Operation('getWeight', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_PetFoodSensors.SensorControl = SensorControl
    del SensorControl

# End of module PetFoodSensors
